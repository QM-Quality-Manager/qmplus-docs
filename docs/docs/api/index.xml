<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Api on</title><link>https://qm-quality-manager.github.io/qmplus-docs/docs/api/</link><description>Recent content in Api on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:48:45 +0000</lastBuildDate><atom:link href="https://qm-quality-manager.github.io/qmplus-docs/docs/api/index.xml" rel="self" type="application/rss+xml"/><item><title>Overview</title><link>https://qm-quality-manager.github.io/qmplus-docs/docs/api/authentication/overview/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://qm-quality-manager.github.io/qmplus-docs/docs/api/authentication/overview/</guid><description>Overview The platform supports multiple authentication mechanisms and additional security protocols. A tenant can be configured to support one or more authentication mechanisms and even have separate authentication mechanisms for different parts of the organization (when you have daughter companies you wish to integrate into the platform but they exist with their own legacy authentication mechanisms).
Tenant This documentation covers the tenant authentication api calls. These are made up of the following endpoints.</description></item><item><title>Activity</title><link>https://qm-quality-manager.github.io/qmplus-docs/docs/api/activity/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://qm-quality-manager.github.io/qmplus-docs/docs/api/activity/</guid><description>Overview This section covers operating on Activities in qmplus.
The relevant swagger information is located at.
Swagger Calendar API
Creating Basic Activities The activity operation are more complex than the Calendar operation as there are a lot of options. In this section we will outline the options and show how you can create a couple of different activies as well as explain an activity tree structure.
Single Activity Lets look at how we can create a basic activity with a single date entry.</description></item><item><title>Calendar</title><link>https://qm-quality-manager.github.io/qmplus-docs/docs/api/calendar/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://qm-quality-manager.github.io/qmplus-docs/docs/api/calendar/</guid><description>Overview This section covers operating on Calendar objects and their associated Activities in qmplus. A tenant can have multiple calender entries.
The relevant swagger information is located at.
Swagger Calendar API
Calendar Operations The calendar is the top level object used for handling activities. There can be one or more Calendar objects for a tenant and they can be placed on different departments and can be inherited by child departments.</description></item><item><title>Case</title><link>https://qm-quality-manager.github.io/qmplus-docs/docs/api/case/case/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://qm-quality-manager.github.io/qmplus-docs/docs/api/case/case/</guid><description>Overview In this chapter we will look at how we can retrieve the case, modify it and also retrieve history. Its important to understand that a case is associated with an entity and workflow. The types of entities supported are.
Entity Description MESSAGE A case attached to a specific registered message ACTION A case representing an Action to resolve one or more messages DOCUMENT A case representing a document and its associated process AUDIT A case representing an audit process of one or more documents HEARING A case representing a hearing process for a given document Cases are created when they are associated to an entity.</description></item><item><title>Dialog</title><link>https://qm-quality-manager.github.io/qmplus-docs/docs/api/case/dialog/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://qm-quality-manager.github.io/qmplus-docs/docs/api/case/dialog/</guid><description/></item><item><title>Local Authentication</title><link>https://qm-quality-manager.github.io/qmplus-docs/docs/api/authentication/local_authentication/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://qm-quality-manager.github.io/qmplus-docs/docs/api/authentication/local_authentication/</guid><description>Local Authentication In this section we look at local authentication and how to proceed with getting authenticated using a locally defined user and password.
Endpoint Description /api/authentication/local Validate if a user and password exists 1. Perform a user and password validation Lets attempt to authenticate a local username and password. The user is not configured with two-factor authentication enabled.
curl -X POST &amp;#34;https://app.</description></item><item><title>Transition</title><link>https://qm-quality-manager.github.io/qmplus-docs/docs/api/case/transition/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://qm-quality-manager.github.io/qmplus-docs/docs/api/case/transition/</guid><description>In this section we will cover performing transitions for a case using the API.
Transitioning Between states with no Dialog In this example we will show to trigger a transition for a specific message going from one state to another where there is no dialog associated with the transition. Lets say if you for example are modeling a Kanban style process where you can freely move a case between states.</description></item><item><title>Two-factor</title><link>https://qm-quality-manager.github.io/qmplus-docs/docs/api/authentication/two_factor/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://qm-quality-manager.github.io/qmplus-docs/docs/api/authentication/two_factor/</guid><description>Two-factor Authentication This section is an overview of how to perform a two-factor authentication step. For some username/password mechanisms the organization can set a two-factor authentication code requirement for the authentication process. This code can be delivered by multiple different means. For the current version of the platform this code is provdied by an email to the user.
Endpoint Description /api/authentication/twofactor Validate a two-factor code Two-factor validation A call to the username/password authentication mechanism returned an object that has the two factor requirement enabled which triggered an email to the user.</description></item><item><title>Password Reet</title><link>https://qm-quality-manager.github.io/qmplus-docs/docs/api/authentication/password_reset/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://qm-quality-manager.github.io/qmplus-docs/docs/api/authentication/password_reset/</guid><description>Password Reset This section covers the reset password functionality. This is only available for the local authentication mechanism as all other mechanisms are handled by external systems where reseting a users password is outside the reach of the platform.
Endpoint Description /api/authentication/local/password/reset/request Request a password reset /api/authentication/local/password/reset Validate if a user and password exists /api/authentication/password/validate Validate a new password Request Password curl -X POST &amp;#34;https://app.</description></item><item><title>Risk</title><link>https://qm-quality-manager.github.io/qmplus-docs/docs/api/risk/risk/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://qm-quality-manager.github.io/qmplus-docs/docs/api/risk/risk/</guid><description>Overview In this section we cover the Risk Model Api. The Risk Model api covers the following endpoints.
Endpoint Method Description /riskmodel/{id} GET Get the latest version specific for a given risk model definition /riskmodel/{id}/version GET Get the risk model versions /riskmodel/version/{versionId} GET Get a specific risk model version /riskmodel GET List all registered risk models /riskmodel POST Create a new risk model /riskmodel/{id} POST Update an existing risk model, this creates a new risk model version instance /riskmodel/{id}/activate PUT Activate a deactivated risk model /riskmodel/{id}/deactivate PUT Deactivate an active risk model A risk model entry looks like the following</description></item></channel></rss>